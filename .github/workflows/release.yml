name: Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read  # Read repository contents
    with:
      python-version: "3.13"
      runner: ubuntu-latest

  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write      # Create releases and tags
      pull-requests: write # Create release PRs
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, release-please]
    if: needs.release-please.outputs.release_created
    permissions:
      contents: read       # Read repository contents
      id-token: write      # PyPI trusted publishing
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install uv

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-3.13-ubuntu-latest
          path: dist/

      - name: Verify version
        run: |
          # Verify that the version matches the release tag
          PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          RELEASE_VERSION="${{ needs.release-please.outputs.version }}"
          
          echo "Package version: $PACKAGE_VERSION"
          echo "Release version: $RELEASE_VERSION"
          
          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "❌ Version mismatch! Package: $PACKAGE_VERSION, Release: $RELEASE_VERSION"
            exit 1
          fi
          
          echo "✅ Version verification passed"

      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing version ${{ needs.release-please.outputs.version }} to PyPI..."
          uv publish --token "$UV_PUBLISH_TOKEN"
          echo "Successfully published to PyPI!"

      - name: Summary
        run: |
          {
            echo "## 🎉 Release Summary"
            echo ""
            echo "Successfully released version **${{ needs.release-please.outputs.version }}**"
            echo ""
            echo "### 📦 Package Links"
            echo "- **PyPI**: [semmy ${{ needs.release-please.outputs.version }}](https://pypi.org/project/semmy/${{ needs.release-please.outputs.version }}/)"
            echo "- **GitHub Release**: [${{ needs.release-please.outputs.tag_name }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }})"
            echo ""
            echo "### 📥 Installation"
            echo '```bash'
            echo "pip install semmy==${{ needs.release-please.outputs.version }}"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
